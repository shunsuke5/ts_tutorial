TypeScript メモ

学習は以下のサイトで進めている。
https://typescriptbook.jp/

・https://learn.microsoft.com/ja-jp/windows/dev-environment/javascript/nodejs-on-windows
　上記サイトを参考にしてWindowsにNode.jsをインストール。

・Node.jsでファイルを実行するには、ターミナルでファイルがある場所に移動して node app.js のようにコマンドを実行するだけ。

・アロー関数とは、関数リテラルをシンプルに記述する方法のこと。
　https://qiita.com/may88seiji/items/4a49c7c78b55d75d693b

・useStateは、コンポーネント内で「状態」を扱うための関数の1つ。
　https://qiita.com/KokiSakano/items/c16a8daf03acdbd6c911

・Promiseとは、非同期処理の結果を成功(resolve)または失敗(reject)で返すオブジェクトである。
　Promiseを使用すると、失敗の処理を分岐したり、複数の非同期処理を順番に実行したり、並行して実行することができる。
　Promiseはthen()メソッドを使って、複数の処理をつなぎ順番に実行することができる。
　https://qiita.com/saka212/items/9b6cfe06b464580c2ee6

・Jestで関数をテストする際は、functionの前にexportを記述して関数をエクスポートし、
　テストファイルでその関数をインポートする必要がある。

・基本的なテストコードは以下のような形で記述する。

    const result = isZero(0);
    expect(result).toBe(true);

　上記の場合、isZero()メソッドに0を渡した場合は、trueが想定されるといったテストコードである。
　toBe()マッチャーは、JavaScriptの厳密等価比較(===)と同じであるため、expect(result).toBe(true)は内部的に
　result === true かを評価する。
　マッチャーの種類については以下サイトを参照。
　https://jestjs.io/ja/docs/expect

・コードを整形する際は、prettierを使用するのが便利。
　インストールしたら yarn prettier --write 対象ディレクトリ/ファイル で整形することができる。
　.pretterrcファイルをルートに作成し、そこにルールを書き込める。

・ESLintでコードが設定した規約に反しているかどうかをチェックできる。
　ESLintのrulesに指定するルールは以下サイトを参照。no-console,camelcase,semi などがある。
　https://eslint.org/docs/latest/rules/

・ESLintではTypeScriptはチェックできないため、TypeScriptESLintを用いる必要がある。
　TypeScriptESLintにはESLintの200以上のルールに加え、100以上のルールが追加される。
　https://typescript-eslint.io/rules/

・全てのファイルをモジュールとして扱いたい場合、tsconfig.jsonの moduleDetection をforceに設定すると、
　全てのファイルがモジュールとして扱われるようになり、ファイル間で変数名が重複していてもエラーが出なくなる。
　https://www.webdesignleaves.com/wp/jquery/2167/

・ts-nodeコマンドで、TypeScriptを1回のコマンドで実行できる。
　https://qiita.com/alpha_z/items/28c46333e9d4f714e09c

・npm installで使用するgオプションは、グローバルな領域にインストールすることでパスを通してくれ、
　どの場所からでも短縮した形(tsc,ts-nodeなど)でコマンド実行できるため便利だが、
　-gがついていた場合たとえ--saveなどをつけていても、package.jsonに追記がされない。

　そして、ローカルにインストールしたコマンドをts-nodeのような短縮形で実行するのには npm run コマンドが便利。
　package.jsonの"scripts":{} 内に"ts-node":"ts-node"のように記載すれば、npm run ts-node コマンドで
　ts-node コマンドと同様に動作する。
　https://qiita.com/DeployCat/items/cd456d6bea72937464f8

・ts-nodeをインストールした。
　https://tomosta.jp/2024/01/ts-node/

・npm installコマンドに --save-dev オプションをつけると、package.jsonの dependencies ではなく、devDependencies に追記される。
　devDependenciesに記載されているパッケージは、git cloneでクローンした後、必要なパッケージをインストールする際に実行する
　npm install --production コマンドでインストールされない。
　https://qiita.com/kohecchi/items/092fcbc490a249a2d05c
　https://zenn.dev/hrkmtsmt/articles/5f4a0e5c79b77a

・jest,ts-jest,@types/jestをインストールし、構造的型付けのモックテストの簡略化をテストしてみた。
　テスト構成などは1つ目のサイト、ts-jestで認識させる方法は2つ目のサイトを参照。
　https://qiita.com/okazuki/items/991a068892e946531612
　https://qiita.com/mktu/items/d36416baba155dfecc00

・npm(node package manager)はパッケージの管理ツール、
　npx(node package executer)はローカルインストールしたコマンドを実行するために使用するツールである。
　https://qiita.com/kohta9521/items/ee3ed4a2360add80ad79

・

never型　から

================================================================================================================================

エラーやミス、わからなかったことなど

・npm install -g typescript を実行した後に、tsc -v とすると、
　「スクリプトの実行が許可されていない」といった旨のエラーが出て、確認ができない。
　　→ 原因は、powershellのスクリプト実行ポリシーがRestrictになっていることだった。
　　　実行ポリシーとは、powershellが構成ファイルを読み込み、スクリプトを実行する条件を制御する安全機能のこと。
　　　管理者権限でpowershellを開き、Set-WxecutionPolicy RemoteSigned を実行し、RemoteSignedにすることで解決。
　　　https://qiita.com/naopin708/items/0cbffce4fef6f4eca50f
　　　Windowsの実行ポリシーについて:https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4

・「Reactコンポーネントのテストを書こう」にて、testing-libraryをインストールするため以下のコマンドを実行した。

    yarn add \
    @testing-library/react@14 \
    @testing-library/jest-dom@5 \
    @testing-library/user-event@14

　すると、「Error: EPERM: operation not permitted, lstat 'C:\Config.Msi'」や
　「Error: EBUSY: resource busy or locked, lstat 'C:\DumpStack.log.tmp'」のエラーが出てインストールができない。
　　→ 原因は、改行を示すバックスラッシュをそのままコマンドに組み込んでいたことだった。
　　　1つずつインストールしていくことで今回は無事インストールできたが、上記で実行したコマンドからバックスラッシュを無くせば、
　　　普通に実行されたと思われる。つまり、以下の形。
　　　yarn add @testing-library/react@14 @testing-library/jest-dom@5 @testing-library/user-event@14
　　　慣れていないコマンドのため、バックスラッシュを用いたこういう記法なのだと思い込んでしまっていたのが悪かった。

・tsc init を実行すると、「Could not resolve the path 'init' with the extensions: '.ts', '.tsx', '.d.ts', '.cts', '.d.cts', '.mts', '.d.mts'.
  The file is in the program because: Root file specified for compilation」のエラーが出る。
　　→ 原因はわからない。tsc --init を代わりに実行することで解決。
　　　https://stackoverflow.com/questions/68970633/error-ts6231-could-not-resolve-the-path-with-the-extensions-ts-tsx

・if(Number.isNaN(変数名)) のところで、
　「Property 'isNaN' does not exist on type 'NumberConstructor'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.」
　のエラーが出る。
　　→ 原因は、libオプションに値を設定していないこと。　　　
　　　https://qiita.com/k_hoso/items/a8b9de1f5f6b2b93b4f7

　　　調べてみるとtscコマンドでファイルを指定すると、tsconfig.jsonファイルは無視されるらしい。
　　　https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
　　　そのため、tsconfig.jsonのlibにes2016,domと指定したうえで tsc で一括コンパイルした。

・for-in文内で foo[prop] のように記述すると、「TS7053: Element implicitly has an 'any' type because expression of type 'string'
　can't be used to index type '{ a: number; b: number; c: number; }'. No index signature with a parameter of type 'string'
　was found on type '{ a: number; b: number; c: number; }'.」のエラーが出る。
　　→ 原因は、fooオブジェクトのプロパティに対する型安全性のチェック。TypeScriptはfooのプロパティがstring型でインデックス指定できるとは
　　　認識していないためエラーが発生するとのこと(chatgpt)、なぜ認識できないのか？foo["a"]だとエラーは出ない。
　　　foo[prop as keyof typeof foo] とすることで解決。
　　　他にも、interface Fooにインデックス型を用いたり、Object.keys(foo) as (keyof typeof foo)[]を用いる方法もあるらしい。
　　　https://qiita.com/hisashisatake@github/items/0ed17b1f6b2c0108be59

・ts-nodeを実行すると、なぜか最後に undefined が表示される
　　→ 原因は、関数の戻り値を指定していなかったこと。そのため、function a() { console.log("a"); } のような関数を
　　　console.log(a()); のような形で呼び出すと、戻り値が無いためundefinedが表示されていた。
　　　戻り値をreturn文で明確に指定する事で解決。

・